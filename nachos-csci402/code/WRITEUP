Title: Writeup for Project 4, Summer 2013
Date: 07/27/13
Group Num 7: 	Name				Email				Student ID
				Merrick Bautista	mlbautis@usc.edu	1134757772
				Francesca Nannizzi	nannizzi@usc.edu	6330648898
				Sonia Yang			soniayan@usc.edu	1576346062
	
NOTE: We do not have a Part I as the person in our group who was assigned
		to do it did not. We have talked to Professor Crowley and he is 
		aware of this issue.

I. Requirements
		We are to alter our server code so that it works with multiple
	servers. Our client programs will randomly select a server to send
	syscalls to and the servers will communicate with each other to
	do the appropriate work or return the appropriate value. No single
	server will have all the locks, CVs, and MVs so they must communicate
	and relay messages to the appropriate server that has the lock, CV,
	or MV.

II. Assumptions
	We assume that when we signal or wait on a specific lock, we own the
		lock. There is no check to see if it has been acquired.
	We assume there could be up to 5000 locks, cvs, and mvs.
		Note: These are limited to 500 in this case to make the outputs
		look prettier, but the test will run with 5000.
	We assumed there to be only ten mailboxes per machine.
	We assume we only have 32 physical pages of memory.
	We assume all locks, cvs, and mvs have unique names.
	
III. Design
		We need to modify our server to recognize there are other servers
	present as well. The message will first go from the user client to 
	the randomly selected server. If the specific server does not have
	the lock, cv, or mv, it does not necessarily mean it doesn't exist,
	for it could simply be on another server. At this point we need to 
	relay the message over to the server's message handler. This message
	handler will relay the messages to the other servers to see if they
	have the appropriate lock, cv, or mv. If one server replies 'YES',
	then that server gains responsibility of the message and the first
	server drops the message. If all the server replies 'NO', then the
	original server will either send an error if it is not a create or
	it will create the lock, cv, or mv.
	
IV. Implementation
	Files Modified: 
					userprog/exception.cc
	
					test/Makefile
					
					network/nettest.cc
					
	Files Added:	
					test/wait1.c
					test/wait2.c
					test/wait3.c
					test/wait_test.c
					test/signal1.c
					test/signal2.c
					test/signal3.c
					test/signal_test.c
					test/broadcast1.c
					test/broadcast2.c
					test/broadcast3.c
					test/broadcast4.c
					test/broadcast5.c
					test/broadcast_test.c
					
	Data Structures Added:
					typedef struct InProgressMessage {
						Message* message;
						int yesReplies, noReplies;
					};	
					
					typedef struct ThreadID {
						int machineID, threadID;	
						bool equals(int n) const { return ((machineID == n) && (threadID == n)); }
						bool equals(int m, int t) const { return ((machineID == m) && (threadID == t)); }
						void setIDs(int n) { machineID = n; threadID = n; }
						void setIDs(int m, int t) { machineID = m; threadID = t; }
						void getIDs() {printf("Machine ID: %i, Thread ID %i\n",machineID,threadID);}
					};
					
					List messageQueue;
					List inProgressMessages;
	
	Functions Added:
					network/nettest.cc
						void MessageHandler();
						void incrementYesReplies(int ptr);
						void incrementNoReplies(int ptr);
						bool sendToMessageHandler(PacketHeader outPktHdr, MailHeader outMailHdr, Message* response);
						int findLockByName(char* name, int machineID);
						int findConditionByName(char* name, int machineID);
						int findMonitorVariableByName(char* name, int machineID);

V. Testing

	Lit of Test Names:
		createlock_test
		acquirelock
		releaselock
		destroylock
		createcondition
		wait_test
		signal_test
		broadcast_test
		destroycondition
		createmv
		setmv
		getmv
		destroymv

	Replace anything with a # with an appropriate value
	
	For each instance of nachos you would like to be a server:
		nachos -m #machineID -SERVER -nS #numberOfServers
			#machineID should be anything from 0 to #numberOfServers-1
				They should all be unique
			#numberOfServers is simply how many servers you plan to use
				Should be anything from 1 to 5
	For the instance of nachos you would like to be the client:
		nachos -m #machineID -x ../test/#testName -rs #randomSeed -nS #numberOfServers
			#machineID should be equal to or greater than #numberOfServers
				Should be different than any server machineID
			#testName will be whichever test you wish to run
				Test names will be listed below
			#randomSeed will be any value to determine randomization
			#numberOfServers will be the same as before
	
	Tests:
createlock_test
	-Creates a lock, attempts to recreate the same lock, then makes a
		second new lock
		
numServers: 5
Num Pages: 13
Num Pages: 19
Exit value: 0 
Test is creating a lock named lock1
  Sending to Server1
message prepared: CL lock1 Lock 5 -1 -1 -1 -1 -1
Lock created successfully at index 0100

Test is creating another lock named lock1
 LSending to Server4
message prepared: CL lock1 Lock 5 -1 -1 -1 -1 -1
Lock already exists at index 0100
  
Test is creating another lock named lock2
 LoSending to Server3
message prepared: CL lock2 Lock 5 -1 -1 -1 -1 -1
Lock2 created successfully at index 0300
Exit value: 0 
Machine halting!

Ticks: total 1837954, idle 1836009, system 1740, user 205
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0
Network I/O: packets received 3, sent 3

Cleaning up...

acquirelock
	-attempts to acquire bad locks at indices -1 and 200, creates a lock
		(it says index 0 but with unique ids it can end up as any
		multiple of 200), acquires it, attempts to reacquire it, 
		releases and destroys it, and then attempts to reacquire a 
		destroyed lock

numServers: 5
Num Pages: 28

Test is attempting to acquire lock at index -1
Sending to Server3
Lock not acquired

Test is attempting to acquire lock at index 200
Sending to Server4
Lock not acquired

Test is creating lock at index 0
Sending to Server2
message prepared: CL test Lock 4 -1 -1 -1 -1 -1
Lock created successfully at index 0200

Test is acquiring lock at index 0200
Sending to Server4
Lock acquired successfully from index 0200

Test is attempting to reacquire lock at index 0200
Sending to Server2
Lock not acquired

Test is releasing lock at index 0200
Sending to Server2
Lock released successfully from index 0200
 

Test is attempting to destroy the lock at index 0200
  LSending to Server0
Lock at index 0200 destroyed successfully
 
Test is attempting to acquire lock at index 0200
   Sending to Server4
Lock not acquired
Exit value: 0 
Machine halting!

Ticks: total 2709584, idle 2705318, system 3840, user 426
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0
Network I/O: packets received 8, sent 8

Cleaning up...

releaselock
	-attempts to release lock at indices -1 and 200, then creates lock,
		then attempts to release without acquiring, then actually
		acquires, then actually releases, destroys the lock, and
		attempts to release a destroyed lock
numServers: 5
Num Pages: 28

Test is attempting to release a lock at index -1
Sending to Server4
Lock not released

Test is attempting to release a lock at index 200
Sending to Server1
Lock not released

Test is creating a lock at index 0
Sending to Server4
message prepared: CL test Lock 4 -1 -1 -1 -1 -1
Lock created successfully at index 0400

Test is attempting to release lock at index 0400 without acquiring
Sending to Server4
Lock not released

Test is acquiring lock at index 0400
Sending to Server1
Lock acquired successfully from index 0400

Test is releasing lock at index 0400
Sending to Server3
Lock at index 0400 released successfully

Test is destroying previously released lock at index 0400
 LoSending to Server4
Lock at index 0400 set to be destroyed
 
Test is attempting to release previously destroyed lock at index 0400
   Sending to Server4
Lock not released
Exit value: 0 
Machine halting!

Ticks: total 2440869, idle 2436387, system 4050, user 432
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0
Network I/O: packets received 8, sent 8

Cleaning up...

destroylock
	-attempts to destroy locks at indices -1 and 200, then creates a lock
	and acquires it and releases it, destroys it, and attempts to
	acquire it again but fails since it has been destroyed

numServers: 5
Num Pages: 27

Test is attempting to destroy a lock at index -1
Sending to Server4
Lock not set to be destroyed

Test is attempting to destroy a lock at index 200
Sending to Server1
Lock not set to be destroyed

Test is creating a lock at index 0
Sending to Server0
message prepared: CL test Lock 4 -1 -1 -1 -1 -1
Lock created successfully at index 00

Test is acquiring lock at index 00
Sending to Server0
Lock acquired successfully from index 00

Test is releasing lock at index 00
Sending to Server4
Lock released successfully from index 00
 

Test is attempting to destroy previously released lock at index 00
Sending to Server2
Lock at index 00 set to be destroyed
 
Test is acquiring lock at index 00
Sending to Server4
Lock not acquired because it has been destroyed
 Exit value: 0 
Machine halting!

Ticks: total 2450592, idle 2446801, system 3420, user 371
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0
Network I/O: packets received 7, sent 7

Cleaning up...

createcondition
	-creates a condition, attempts to recreate the same condition, and
		creates a new condition

numServers: 5
Num Pages: 13
Num Pages: 20
Exit value: 0 
----------------------------------
 Beginning CreateCondition test.
  ----------------------------------
 Test is creating a condition named condition1
  Sent to Server3
Condition created successfully at index 0300
  ----------------------------------
 Test is attempting to create another condition named condition1
  Sent to Server4
Condition already exists at index 0300
 c----------------------------------
 Test is creating another condition named condition2
  Sent to Server3
Condition created successfully at index 0301
  Exit value: 0 
Machine halting!

Ticks: total 2039632, idle 2037145, system 2230, user 257
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0
Network I/O: packets received 3, sent 3

Cleaning up...

wait_test
	-Note the distinction between 'Test' and 'Test2'
	-Note there are also some long yields to ensure signals are sent
		after the waits so it takes a few seconds to run
	-Test creates a lock and CV then acquires the lock and waits on the
		CV, Test2 acquires the lock, signals with the CV, and releases 
		the lock, Test is awoken and reacquires the lock, then it
		tries to wait on bad CVs and bad locks

numServers: 5
Num Pages: 13
Num Pages: 16
Test is creating a lock named lock1
  Sending to Server1
message prepared: CL lock1 Lock 5 -1 -1 -1 -1 -1
Num Pages: 21
Num Pages: 19
Exit value: 0 
Lock created successfully at index 0100

Test is creating a cv named cv1
   Sent to Server1
CV created successfully at index 0100
Exit value: 0 
Sending to Server4
message prepared: CL lock1 Lock 5 -1 -1 -1 -1 -1
Sent to Server1

Test is acquiring lock at index 0100
Sending to Server1
Lock acquired successfully from index 0100

Test is waiting on CV1
  Sending to Server4
Sending to Server3
message prepared: CL lock1 Lock 5 -1 -1 -1 -1 -1
Sent to Server1

Test2 is acquiring lock at index 0100
Sending to Server3
Lock acquired successfully from index 0100

Test2 is signalling the waiter
 Sending to Server1

Test2 is releasing lock at index 0100
Sending to Server4
Lock at index 0100 released successfully
Exit value: 0 

Test has been signalled and has reacquired the lock
  
Test is waiting on CV at index -1
 
Sending to Server0
Test not able to wait on the CV

Test is waiting on CV that is NULL
  Sending to Server4
Test not able to wait on the CV

Test is waiting on lock at index -1
  Sending to Server2
Test not able to wait on the CV

Test is waiting on lock at index 200
  Sending to Server4
Test not able to wait on the CV
Exit value: 0 
Machine halting!

Ticks: total 9415950, idle 4340380, system 4765770, user 309800
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0
Network I/O: packets received 15, sent 15

Cleaning up...

signal_test
	-Same notes as the wait_test
	-Test creates a lock and CV, acquires it then waits, then Test2
		acquires the lock and signals using invalid CVs and locks, then
		finally signals on the correct one and releases, and as a 
		result Test wakes up and reacquires the lock


numServers: 5
Num Pages: 13
Num Pages: 16
Test is creating a lock named lock1
  Sending to Server3
message prepared: CL lock1 Lock 5 -1 -1 -1 -1 -1
Num Pages: 17
Num Pages: 24
Exit value: 0 
Lock created successfully at index 0300

Test is creating a cv named cv1
   Sent to Server1
CV created successfully at index 0100
Exit value: 0 
Sending to Server3
message prepared: CL lock1 Lock 5 -1 -1 -1 -1 -1
Sent to Server4

Test is acquiring lock at index 0300
Sending to Server0
Lock acquired successfully from index 0300

Test is waiting on CV1
  Sending to Server3
Sending to Server4
message prepared: CL lock1 Lock 5 -1 -1 -1 -1 -1
Sent to Server0

Test2 is acquiring lock at index 0300
Sending to Server3
Lock acquired successfully from index 0300

Test2 is signalling the waiter using CV at index -1
  Sending to Server3
Test2 not able to signal on the CV

Test2 is signalling the waiter using CV at index 10000
  Sending to Server3
Test2 not able to signal on the CV

Test2 is signalling the waiter using CV at index 143
  Sending to Server2
Test2 not able to signal on the CV

Test2 is signalling the waiter using lock at index -1
 
Sending to Server4
Test2 not able to signal on the CV

Test2 is signalling the waiter using lock at index 5698
  Sending to Server3
Test2 not able to signal on the CV

Test2 is signalling the waiter
 Sending to Server2

Test2 is releasing lock at index 0300
Sending to Server3
Lock at index 0300 released successfully
Exit value: 0 

Test has been signalled and has reacquired the lock
  Exit value: 0 
Machine halting!

Ticks: total 8687942, idle 4533648, system 3871320, user 282974
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0
Network I/O: packets received 16, sent 16

Cleaning up...

broadcast_test
	-Same distinctions as before except there will also be a 'Test5'
	-Test creates a lock, CV, acquires the lock and waits on the CV,
		Test2 also acquires the lock and waits on the CV, then Test5
		attempts to broadcast on bad CVs and locks, and finally 
		proceeds to broadcast on the proper CV and lock, and then 
		releases the lock, then Test and Test2 are awoken, reacquire
		the lock and releases
	
numServers: 5
Num Pages: 13
Num Pages: 23
Num Pages: 20
Test is creating a lock named lock1
  Num Pages: 24
Sending to Server4
message prepared: CL lock1 Lock 5 -1 -1 -1 -1 -1
Exit value: 0 
Lock created successfully at index 0400

Test is creating a cv named cv1
   Sent to Server3
CV created successfully at index 0300

Test is acquiring lock at index 0400
Sending to Server1
Lock acquired successfully from index 0400

Test is waiting on CV1
  Sending to Server4
Sending to Server3
message prepared: CL lock1 Lock 5 -1 -1 -1 -1 -1
Sent to Server0

Test2 is acquiring lock at index 0400
Sending to Server3
Lock acquired successfully from index 0400

Test2 is waiting on CV1
  Sending to Server1
Sending to Server2
message prepared: CL lock1 Lock 5 -1 -1 -1 -1 -1
Sent to Server0

Test5 is acquiring lock at index 0400
Sending to Server4
Lock acquired successfully from index 0400

Test 5 is broadcasting on CV at index -1
  Sending to Server2
Test 5 not able to broadcast on the CV
 
Test 5 is broadcasting on CV at index 6000
  Sending to Server2
Test 5 not able to broadcast on the CV
 
Test 5 is broadcasting on NULL CV
 
Sending to Server1
Test 5 not able to broadcast on the CV
 
Test 5 is broadcasting on lock at index -1
  Sending to Server1
Test 5 not able to broadcast on the CV
 
Test 5 is broadcasting on lock at index 7000
  Sending to Server1
Test 5 not able to broadcast on the CV
 
Test5 is signalling the waiters
 
Test 5 is broadcasting
  Sending to Server0

Test5 is releasing lock at index 0400
Sending to Server1
Lock at index 0400 released successfully
Exit value: 0 

Test has been signalled and has reacquired the lock
  
Test is releasing lock at index 0400
Sending to Server2
Lock at index 0400 released successfully
Exit value: 0 

Test2 has been signalled and has reacquired the lock
  
Test2 is releasing lock at index 0400
Sending to Server1
Lock at index 0400 released successfully
Exit value: 0 
Machine halting!

Ticks: total 15289211, idle 6874163, system 7926860, user 488188
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0
Network I/O: packets received 20, sent 20

Cleaning up...


destroycondition
	-test attempts to destroy condition that does not exist, then it
		creates the condition, destroys it, and tries to redestroy it
		but it is already destroyed

numServers: 5
Num Pages: 22
----------------------------------
 Beginning DestroyCondition test
  ----------------------------------
 Test is attempting to destroy a condition that hasn't been created
 CSending to Server0
Condition not destroyed
  ----------------------------------
 Test is creating a condition named condition1
  Sent to Server4
Condition created successfully at index 0400
  ----------------------------------
 Test is destroying condition1
  Sending to Server4
Condition destroyed successfully at index 0400
 T----------------------------------
 Test is attempting to destroy condition1 again
 CSending to Server3
Condition already destroyed successfully at index 0400
 Exit value: 0 
Machine halting!

Ticks: total 1803742, idle 1801269, system 2210, user 263
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0
Network I/O: packets received 4, sent 4

Cleaning up...

createmv
	-creates an MV with an invalid size, creates one with a size of 1,
		then attempts to recreate the same MV

numServers: 5
Num Pages: 18
Test is creating an MV named mv with size 0
 Sending to Server1
MV not created
 
Test is creating an MV named mv with size 1
  Sending to Server1
MV created successfully at index 0100

Test is creating another MV named mv with size 1
  Sending to Server1
MV already exists at index 0100
 Exit value: 0 
Machine halting!

Ticks: total 760594, idle 758651, system 1780, user 163
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0
Network I/O: packets received 3, sent 3

Cleaning up...

getmv
	-test tries to get a NULL MV, then it attempts to get some invalid 
		MVs, then it creates an MV, sets mv[1] to 5, attempts to get
		bad indices, and then gets mv[1] which is 5

numServers: 5
Num Pages: 25
Test is getting uninitialized MV
 Sending to Server3
MV not gotten
 
Test is getting invalid MV (-1)
  Sending to Server3
MV not gotten
 
Test is getting invalid MV (550)
  Sending to Server3
MV not gotten
 
Test is creating an MV named mv
  Sending to Server1
MV created successfully at index 0100

Test is setting mv[1] to be 5
 mSending to Server1
mv[1] was set to be 5
 
Test is getting mv[-1]
  Sending to Server3
mv[-1] not gotten
 
Test is getting mv[590]
  Sending to Server1
mv[590] not gotten
 
Test is getting mv[1]
 mSending to Server0
mv[1] is 05
 Exit value: 0 
Machine halting!

Ticks: total 3687277, idle 3683682, system 3250, user 345
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0
Network I/O: packets received 8, sent 8

Cleaning up...

setmv
	-test tries to set non-existent MVs, then creates an MV, attempts to
		set invalid indices, finally sets mv[1] to 5 and gets it to 
		prove that its been set

numServers: 5
Num Pages: 24
Test is setting a non-existent MV to be 5
 Sending to Server0
MV not set
 
Test is setting an invalid MV (-1) to be 5
  Sending to Server1
MV not set
 
Test is setting an invalid MV (700) to be 5
  Sending to Server2
MV not set
 
Test is creating an MV named mv
  Sending to Server0
MV created successfully at index 00

Test is setting mv[-1] to be 5
  Sending to Server4
mv[-1] not set
 
Test is setting mv[600] to be 5
  Sending to Server3
mv[600] not set
 
Test is setting mv[1] to be 5
 mSending to Server0
mv[1] was set to be 5
 
Test is getting mv[1]
 mSending to Server0
mv[1] is 05
 Exit value: 0 
Machine halting!

Ticks: total 3694848, idle 3691015, system 3480, user 353
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0
Network I/O: packets received 8, sent 8

Cleaning up...

destroymv
	-test attempts to destroy invalid MVs, then creates an MV and then
		destroys it, then it tries to set it but it can't since it is 
		destroyed
numServers: 5
Num Pages: 21
Test is trying to destroy an MV at index -1
 Sending to Server1
MV not destroyed
 
Test is trying to destroy an MV at index 5001
 
Sending to Server3
MV not destroyed
 
Test is creating an MV named mv
  Sending to Server1
MV created successfully at index 0100

Test is trying to destroy an MV at index 0100
 
Sending to Server2
MV destroyed successfully at index 0100
 
Test is setting mv[1] to be 5
 mSending to Server4
mv[1] not set since it has been destroyed
 Exit value: 0 
Machine halting!

Ticks: total 2204304, idle 2201587, system 2470, user 247
Disk I/O: reads 0, writes 0
Console I/O: reads 0, writes 0
Paging: faults 0
Network I/O: packets received 5, sent 5

Cleaning up...

VI. Discussion
	Experiment Expectation
		We hope that each time the program sends a syscall to a random
	server, and if that server has the lock, CV, or MV, then it will
	execute the appropriate code. If not, then it should message the
	other servers to see who has the lock, CV, or MV. If no one has it
	and it is a create, then the original server should make the lock,
	CV, or MV. 
	
	Experiment Results
		It happens as expected. The servers communicate with each other
	and get the right information back to the userprogram. System calls
	have no idea who they are messaging and they still get the right
	information.
	
VII. Miscellaneous
		As mentioned before, we do not have a Part I, but this has been
	discussed with Professor Crowley.